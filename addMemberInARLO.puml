@startuml
actor       Admin             as admin
participant ARLO              as ARLO
boundary    arloWebHookController as arloWebHookController
collections arloWebhookService as arloWebhookService
collections arloResourceService as arloResourceService
collections groupService      as groupService
collections memberService     as memberService
collections licenseService    as licenseService
entity      groupRepository   as groupRepository
entity      memberRepository  as memberRepository
entity      licenseRepository as licenseRepository
database    DB                as DB
collections loggerService     as loggerService

admin -> ARLO : update course

group recceive and identify event of ARLO
ARLO -> arloWebHookController : CALL API: /arlo/webhook/event-listener
activate arloWebhookService
arloWebHookController -> arloWebhookService : CALL verifySignature(payload)

arloWebhookService -> loggerService : CALL addArloWebhookSuccessResponse(payload)

arloWebhookService -> arloWebhookService : CALL identifyEventType(payload)
activate Cache #purple
end

arloWebhookService -> ARLO : /api/<Event_DATE>/auth/resources/events/{EventID}/


ARLO --> arloWebhookService : [Ok: 200] Event details JSON
deactivate ARLO

group add member into subgroup based on arlo event payload
arloWebhookService -> groupService : CALL addMemberIntoARLOSubGroup(arloEventPayload)

activate groupService
groupService -> groupRepository : CALL getSubGroupFromCourseId(courseId = arloEventPayload["courseId"])

activate groupRepository
groupRepository -> DB : getOne() query

activate DB

alt#Gold #ADE792 Success
DB -> groupRepository : GroupEntity
deactivate DB

groupRepository -> groupService : GroupEntity
deactivate groupRepository
else #lightblue No organization found
DB -> groupRepository : [SqlError] No such record found
groupRepository -> groupService : [SqlError] No such record found
groupService -> loggerService : CALL eventErrorResponse(eventType = "ArloSubGroupGetCourseId", eventpayload, error)
groupService -> arloWebhookService : No parent group found with that organization ID
end

groupService -> memberService : CALL addMemberIntoARLOSubGroup(arloEventPayload, subGroup: GroupEntity)
memberService --> memberRepository: CALL addMemberIntoARLOSubGroup(arloEventPayload, subGroup: GroupEntity)
memberRepository --> DB: insert() query

activate groupRepository
alt#Gold #ADE792 Success
DB -> memberRepository : GroupMemberEntity
memberRepository -> memberService : GroupMemberEntity
else #pink Failure
activate DB
DB -> memberRepository : [SqlError] SQL Error
memberRepository -> memberService : [SqlError] SQL Error
memberService -> loggerService : CALL eventErrorResponse(eventType = "ArloSubGroupUpdate", eventpayload, error)
deactivate DB
end


group Rare case of member addition failing due to license seat restriction
memberService --> memberService: Validation response: Error when adding record due to exceeding license seat
memberService --> arloResourceService: CALL getARLOCourseDetails(courseId)
arloResourceService --> ARLO: CALL /api/auth/resources/courses/<id>
ARLO --> arloResourceService: [OK: 200] ARLOCourseDetails
arloResourceService --> memberService: ARLOCourseDetails
memberService -> licenseService : CALL updateLicenseSeatCountForArloSubgroup(arloPayload: ArloCourseDetails, subGroupDetail: GroupEntity)

activate licenseService
licenseService -> licenseRepository : CALL getLicenseBySubGroup(subGroupDetail: GroupEntity)

activate licenseRepository
licenseRepository -> DB : getOne() query
DB -> licenseRepository : LicenseEntity
licenseRepository -> licenseService : LicenseEntity
deactivate licenseRepository

licenseService -> licenseRepository : CALL updateSeats (licenseDetails: LicenseEntity, seats = arloPayload["seats"])
activate licenseRepository
licenseRepository -> DB : update() query
DB -> licenseRepository : LicenseEntity
licenseRepository -> licenseService : LicenseEntity
deactivate licenseRepository
licenseService -> memberService : LicenseEntity
deactivate licenseService
memberService -> memberRepository : [Retry] CALL addMemberIntoSubGroup(memberDetails, subGroupDetail: GroupMemberEntity)
memberRepository -> DB : [Retry] insert() query
DB --> memberRepository: GroupMemberEntity
memberRepository --> memberService: GroupMemberEntity
end

deactivate groupRepository

memberService -> loggerService : CALL eventSuccessResponse(eventType = "ArloSubGroupMemberAddition", eventpayload, subGroupdetails: GroupEntity, licensedetails: LicenseEntity)
deactivate groupService
end
deactivate arloWebHookController
@enduml
